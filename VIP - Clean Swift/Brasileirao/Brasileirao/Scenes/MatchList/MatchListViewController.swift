//
//  MatchListViewController.swift
//  Brasileirao
//
//  Created by Fabio Martinez on 08/01/2019.
//  Copyright (c) 2018 Fabio Martinez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MatchListDisplayLogic: class
{
    func displayFetchedMatches(viewModel: MatchList.FetchMatches.ViewModel)
    func showMatchDetails(viewModel: MatchList.Route.ViewModel)
    func displayMessage(viewModel: MatchList.FetchMatches.ViewModel.MessageViewModel)
    func displayRefreshControl(viewModel: MatchList.FetchMatches.ViewModel.RefreshViewModel)
}

class MatchListViewController: UIViewController {
    
    @IBOutlet weak public var tableView: UITableView!

    var interactor: MatchListBusinessLogic?
    var router: (NSObjectProtocol & MatchListRoutingLogic & MatchListDataPassing)?
    var fetchedMatches: [MatchViewModel] = []
    var alertView = AlertMessageView()
    
    lazy var refreshControl: UIRefreshControl = {
        let refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action:(#selector(self.handleRefresh(_:))), for: .valueChanged)
        refreshControl.tintColor = UIColor.init(red: 59/255, green: 156/255, blue: 0/255, alpha: 1)
        
        return refreshControl
    }()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = MatchListInteractor()
        let presenter = MatchListPresenter()
        let router = MatchListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
              let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
              if let router = router, router.responds(to: selector) {
                    router.perform(selector, with: segue)
              }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        configureTable()
        configureView()
        fetchMatches()
    }

    func fetchMatches() {
        self.refreshControl.beginRefreshing()
        let request = MatchList.FetchMatches.Request.FetchMatches()
        interactor?.fetchMatches(request: request)
    }
    
    func configureTable() -> (Void) {
        let nib = UINib(nibName: MatchTableViewCell.cellIdentifier(), bundle: nil)
        self.tableView.register(nib, forCellReuseIdentifier: MatchTableViewCell.cellIdentifier())
        self.tableView.addSubview(self.refreshControl)
    }
    
    @objc func handleRefresh(_ refreshControl: UIRefreshControl) {
        fetchMatches()
    }
    
    @objc func barButtonPreviewsAction() {
        let request = MatchList.FetchMatches.Request.FetchPreviusMatches()
        interactor?.fetchPreviusMatches(request: request)
    }
    
    @objc func barButtonNextAction() {
        let request = MatchList.FetchMatches.Request.FetchNextMatches()
        interactor?.fetchNextMatches(request: request)
    }
    
    func configureView() -> (Void) {
        self.alertMessage = self.makeShowMsgView()
        let window = UIApplication.shared.keyWindow!
        window.addSubview(self.alertView)
        window.bringSubviewToFront(self.alertView)
        
        let buttonPrevius = UIBarButtonItem(image: UIImage(named: "iconPreviews"), style: .plain, target: self, action: (#selector(MatchListViewController.barButtonPreviewsAction)))
        let buttonNext = UIBarButtonItem(image: UIImage(named: "iconNext"), style: .plain, target: self, action: (#selector(MatchListViewController.barButtonNextAction)))
        buttonNext.tintColor    = UIColor.white
        buttonPrevius.tintColor = UIColor.white
        self.navigationItem.leftBarButtonItem  = buttonPrevius
        self.navigationItem.rightBarButtonItem = buttonNext

    }

}

extension MatchListViewController: MatchListDisplayLogic {

    func displayFetchedMatches(viewModel: MatchList.FetchMatches.ViewModel) {
        fetchedMatches = viewModel.matches
        self.refreshControl.endRefreshing()
        tableView.reloadData()
        self.title = viewModel.screentitle
    }

    func showMatchDetails(viewModel: MatchList.Route.ViewModel) {
        DispatchQueue.main.async { [weak self] in
            self?.performSegue(withIdentifier: "MatchDetails", sender: nil)
        }
    }

    func displayMessage(viewModel: MatchList.FetchMatches.ViewModel.MessageViewModel) {
        showMessage(bgColor: viewModel.bgCollor, msg: viewModel.message)
    }

    func displayRefreshControl(viewModel: MatchList.FetchMatches.ViewModel.RefreshViewModel) {
        if viewModel.displayRefreshControl {
            refreshControl.beginRefreshing()
        } else {
            refreshControl.endRefreshing()
        }
    }
}

extension MatchListViewController: UITableViewDataSource {

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return fetchedMatches.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: MatchTableViewCell.cellIdentifier(), for: indexPath) as! MatchTableViewCell
        
        cell.configure(withViewModel: fetchedMatches[indexPath.row])
        return cell
    }

}

extension MatchListViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return MatchTableViewCell.heightForRow()
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let request = MatchList.Route.Request(index: indexPath.row)
        interactor?.handleMatchSelection(request: request)
    }
}

extension MatchListViewController: AlertMessageDialogPresenter {
    var alertMessage: AlertMessageView {
        get {
            return self.alertView
        }
        set(alert) {
            self.alertView = alert
        }
    }
}
