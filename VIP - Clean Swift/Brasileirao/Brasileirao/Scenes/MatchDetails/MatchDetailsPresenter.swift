//
//  MatchDetailsPresenter.swift
//  Brasileirao
//
//  Created by Fabio Martinez on 08/01/2019.
//  Copyright (c) 2018 Fabio Martinez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MatchDetailsPresentationLogic
{
    func presentTitle(response: MatchDetails.GetTitle.Response)
    func presentErrorOnFetch(response: MatchDetails.FetchBids.Response.Error)
    func presentDataSource(response: MatchDetails.FetchBids.Response.Succes)
    func presentWaitingMessage(response: MatchDetails.FetchBids.Response.WaitingMessage)
    func presentHideMessage(response: MatchDetails.FetchBids.Response.HideMessage)
}

class MatchDetailsPresenter: MatchDetailsPresentationLogic
{
  weak var viewController: MatchDetailsDisplayLogic?

    private func matchDetailsTitle(match: Match) -> (String) {
        var screenTitle = ""
        if let homeTeamAcron = match.teams?.home?.acronyms, let guestTeamAcron = match.teams?.guest?.acronyms {
            screenTitle = "\(homeTeamAcron) x \(guestTeamAcron)"
        }
        return screenTitle
    }

    func presentTitle(response: MatchDetails.GetTitle.Response) {
        let getTitleViewModel = MatchDetails.GetTitle.ViewModel.TitleViewModel(title: matchDetailsTitle(match: response.match))
        viewController?.displayMatchDetailsTitle(viewModel: getTitleViewModel)
    }

    func presentErrorOnFetch(response: MatchDetails.FetchBids.Response.Error) {
        let bgCollorRed = UIColor.init(red: 250/255, green: 80/255, blue: 80/255, alpha: 1)
        let messageViewModel = MatchList.FetchMatches.ViewModel.MessageViewModel(message: response.message, bgCollor: bgCollorRed)
        viewController?.displayMessage(viewModel: messageViewModel)
    }

    func presentDataSource(response: MatchDetails.FetchBids.Response.Succes) {
        var dataSource = [MatchDetailsCellType]()
        for item in response.dataSource {
            switch item {
                case .matchItem(let match):
                    dataSource.append(MatchDetailsCellType.matchCell(cellViewModel: MatchViewModel.init(match: match, showSeparatorView: false)))
                case .bidToBidItem:
                    dataSource.append(MatchDetailsCellType.bidToBidCell)
                case .bidItem(let bid):
                    let bidViewModel = MatchDetails.FetchBids.ViewModel.BidViewModel.init(bid)
                    dataSource.append(MatchDetailsCellType.bidCell(cellViewModel: bidViewModel))
                case .loadingItem:
                    dataSource.append(MatchDetailsCellType.loadingCell(loading: ""))
            }
        }
        let viewModel = MatchDetails.FetchBids.ViewModel(dataSource: dataSource)
        viewController?.displayFetchedBids(viewModel: viewModel)
    }

    func presentWaitingMessage(response: MatchDetails.FetchBids.Response.WaitingMessage) {
        let bgCollorYellow = UIColor.init(red: 213/255, green: 230/255, blue: 23/255, alpha: 1)
        let messageViewModel = MatchList.FetchMatches.ViewModel.MessageViewModel(message: response.message, bgCollor: bgCollorYellow)
        viewController?.displayMessage(viewModel: messageViewModel)
    }
    
    func presentHideMessage(response: MatchDetails.FetchBids.Response.HideMessage) {
        viewController?.hideMessage(viewModel: MatchDetails.FetchBids.ViewModel.HideMessage())
    }

}
