//
//  MatchDetailsViewController.swift
//  Brasileirao
//
//  Created by Fabio Martinez on 08/01/2019.
//  Copyright (c) 2018 Fabio Martinez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MatchDetailsDisplayLogic: class {
    func displayMatchDetailsTitle(viewModel: MatchDetails.GetTitle.ViewModel.TitleViewModel)
    func displayMessage(viewModel: MatchList.FetchMatches.ViewModel.MessageViewModel)
    func hideMessage(viewModel: MatchDetails.FetchBids.ViewModel.HideMessage)
    func displayFetchedBids(viewModel: MatchDetails.FetchBids.ViewModel)
}

class MatchDetailsViewController: UIViewController {
    @IBOutlet weak var tableView: UITableView!
    var interactor: MatchDetailsBusinessLogic?
    var router: (NSObjectProtocol & MatchDetailsRoutingLogic & MatchDetailsDataPassing)?
    var alertView = AlertMessageView()
    var matchDetailsTableViewDataSource: [MatchDetailsCellType] = []
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = MatchDetailsInteractor()
    let presenter = MatchDetailsPresenter()
    let router = MatchDetailsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        configureView()
        configureTable()
        getTitle()
        loadingTable()
        getBids()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        waitingMessageInvalidate()
    }
  
    
    func getTitle() {
        let request = MatchDetails.GetTitle.Request()
        interactor?.getTitle(request: request)
    }
    
    func getBids() {
        let request = MatchDetails.FetchBids.Request()
        interactor?.getBids(request: request)
    }
    
    func loadingTable () {
        let request = MatchDetails.FetchBids.Request.Loading(isLoading: true)
        interactor?.getDataSource(request: request)
    }
    
    func waitingMessageInvalidate() {
        let request = MatchDetails.FetchBids.Request()
        interactor?.loadingTimerInvalidate(request: request)
    }
  
    private func configureView() -> (Void) {
        self.alertMessage = self.makeShowMsgView()
        let window = UIApplication.shared.keyWindow!
        window.addSubview(self.alertView)
        window.bringSubviewToFront(self.alertView)

    }

    func configureTable() -> (Void) {
        let bidNib = UINib(nibName: BidTableViewCell.cellIdentifier(), bundle: nil)
        let LoadingNib = UINib(nibName: LoadingTableViewCell.cellIdentifier(), bundle: nil)
        let matchNib = UINib(nibName: MatchTableViewCell.cellIdentifier(), bundle: nil)
        let bidToBidNib = UINib(nibName: BidToBidTableViewCell.cellIdentifier(), bundle: nil)
        self.tableView.register(matchNib, forCellReuseIdentifier: MatchTableViewCell.cellIdentifier())
        self.tableView.register(bidNib, forCellReuseIdentifier: BidTableViewCell.cellIdentifier())
        self.tableView.register(LoadingNib, forCellReuseIdentifier: LoadingTableViewCell.cellIdentifier())
        self.tableView.register(bidToBidNib, forCellReuseIdentifier: BidToBidTableViewCell.cellIdentifier())
        self.tableView.rowHeight = UITableView.automaticDimension
        self.tableView.estimatedRowHeight = BidTableViewCell.heightForRow()
    }

}

extension MatchDetailsViewController: MatchDetailsDisplayLogic {

    func displayMessage(viewModel: MatchList.FetchMatches.ViewModel.MessageViewModel) {
        showMessage(bgColor: viewModel.bgCollor, msg: viewModel.message)
    }

    func displayMatchDetailsTitle(viewModel: MatchDetails.GetTitle.ViewModel.TitleViewModel) {
        title = viewModel.title
    }
    
    func hideMessage(viewModel: MatchDetails.FetchBids.ViewModel.HideMessage) {
        alertView.hideAlertMessageAnim()
    }
    
    func displayFetchedBids(viewModel: MatchDetails.FetchBids.ViewModel) {
        matchDetailsTableViewDataSource = viewModel.dataSource
        tableView.reloadData()
    }

}

extension MatchDetailsViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return matchDetailsTableViewDataSource.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        switch matchDetailsTableViewDataSource[indexPath.row] {
        case .matchCell(let matchViewModel):
            let cell = tableView.dequeueReusableCell(withIdentifier: MatchTableViewCell.cellIdentifier(), for: indexPath) as! MatchTableViewCell
            cell.configure(withViewModel: matchViewModel)
            return cell
        case .bidToBidCell:
            let cell = tableView.dequeueReusableCell(withIdentifier: BidToBidTableViewCell.cellIdentifier(), for: indexPath) as! BidToBidTableViewCell
            return cell
        case .bidCell(let bidViewModel):
            let cell = tableView.dequeueReusableCell(withIdentifier: BidTableViewCell.cellIdentifier(), for: indexPath) as! BidTableViewCell
            cell.configure(withViewModel: bidViewModel)
            return cell
        case .loadingCell:
            let cell = tableView.dequeueReusableCell(withIdentifier: LoadingTableViewCell.cellIdentifier(), for: indexPath) as! LoadingTableViewCell
            return cell
        }

    }
    
}


extension MatchDetailsViewController: AlertMessageDialogPresenter {
    var alertMessage: AlertMessageView {
        get {
            return self.alertView
        }
        set(alert) {
            self.alertView = alert
        }
    }
}
