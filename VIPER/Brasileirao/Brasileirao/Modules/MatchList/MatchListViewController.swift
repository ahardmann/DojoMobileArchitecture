//
//  MatchListViewController.swift
//  Brasileirao
//
//  Created by Fabio Martinez on 22/01/19.
//  Copyright (c) 2019 Fabio Martinez. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class MatchListViewController: UIViewController {

    // MARK: - Public properties -
    @IBOutlet weak public var tableView: UITableView!
    var presenter: MatchListPresenterInterface!
    var alertView = AlertMessageView()
    
    
    lazy var refreshControl: UIRefreshControl = {
        let refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action:(#selector(self.handleRefresh(_:))), for: .valueChanged)
        refreshControl.tintColor = UIColor.init(red: 59/255, green: 156/255, blue: 0/255, alpha: 1)
        
        return refreshControl
    }()
    
    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        configureTable()
        configureView()
        presenter.viewDidLoad()
    }
    
    func configureTable() -> (Void) {
        let nib = UINib(nibName: MatchTableViewCell.cellIdentifier(), bundle: nil)
        self.tableView.register(nib, forCellReuseIdentifier: MatchTableViewCell.cellIdentifier())
        self.tableView.addSubview(self.refreshControl)
    }
    
    func configureView() -> (Void) {
        self.alertMessage = self.makeShowMsgView()
        let window = UIApplication.shared.keyWindow!
        window.addSubview(self.alertView)
        window.bringSubviewToFront(self.alertView)
        
        let buttonPrevius = UIBarButtonItem(image: UIImage(named: "iconPreviews"), style: .plain, target: self, action: (#selector(MatchListViewController.barButtonPreviewsAction)))
        let buttonNext = UIBarButtonItem(image: UIImage(named: "iconNext"), style: .plain, target: self, action: (#selector(MatchListViewController.barButtonNextAction)))
        buttonNext.tintColor    = UIColor.white
        buttonPrevius.tintColor = UIColor.white
        self.navigationItem.leftBarButtonItem  = buttonPrevius
        self.navigationItem.rightBarButtonItem = buttonNext
        
    }
	
    @objc func handleRefresh(_ refreshControl: UIRefreshControl) {
        fetchMatches()
    }
    
    @objc func barButtonPreviewsAction() {
        presenter.fetchPreviusMatches()
    }
    
    @objc func barButtonNextAction() {
        presenter.fetchNextMatches()
    }
    
    func fetchMatches() {
        setLoadingVisible(true)
        presenter.fetchMatches()
    }
    
}

// MARK: - Extensions -

extension MatchListViewController: MatchListViewInterface {
    
    func displayFetchedMatches(screentitle: String) {
        setLoadingVisible(false)
        tableView.reloadData()
        self.title = screentitle
    }
    
    func setLoadingVisible(_ visible: Bool) {
        if visible {
            refreshControl.beginRefreshing()
        } else {
            refreshControl.endRefreshing()
        }
    }
}


extension MatchListViewController: UITableViewDataSource {

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter.numberOfItems()
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: MatchTableViewCell.cellIdentifier(), for: indexPath) as! MatchTableViewCell
        
        cell.configure(with: presenter.item(at: indexPath), hasSeparatorView: true)
        return cell
    }

}

extension MatchListViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return MatchTableViewCell.heightForRow()
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        presenter.handleMatchSelection(at: indexPath)
    }
}


extension MatchListViewController: AlertMessageDialogPresenter {
    var alertMessage: AlertMessageView {
        get {
            return self.alertView
        }
        set(alert) {
            self.alertView = alert
        }
    }
}
