//
//  MatchDetailsPresenter.swift
//  Brasileirao
//
//  Created by Fabio Martinez on 26/01/19.
//  Copyright (c) 2019 Fabio Martinez. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class MatchDetailsPresenter {

    // MARK: - Private properties -
    
    private unowned let _view: MatchDetailsViewInterface
    private let _wireframe: MatchDetailsWireframeInterface
    private let _interactor: MatchDetailsInteractorInterface
    private let _match: Match
    private var loadingTimer: Timer?
    
    var matchDetailsTableViewDataSource: [MatchDetailsCellType] = [] {
        didSet {
            _view.displayFetchedBids()
        }
    }
    
    
    // MARK: - Lifecycle -

    init(wireframe: MatchDetailsWireframeInterface, view: MatchDetailsViewInterface, interactor: MatchDetailsInteractorInterface, match: Match) {
        _wireframe  = wireframe
        _view       = view
        _interactor = interactor
        _match      = match
    }
    
    private func matchDetailsTitle() -> (String) {
        var screenTitle = ""
        if let homeTeamAcron = _match.teams?.home?.acronyms, let guestTeamAcron = _match.teams?.guest?.acronyms {
            screenTitle = "\(homeTeamAcron) x \(guestTeamAcron)"
        }
        return screenTitle
    }
    
    private func initMatchDataSource(withLoading: Bool) -> ([MatchDetailsCellType]) {
        var dataSource = [MatchDetailsCellType]()
        dataSource.append(MatchDetailsCellType.matchCell(cellViewModel: _match))
        dataSource.append(MatchDetailsCellType.bidToBidCell)
        if withLoading == true {
            dataSource.append(MatchDetailsCellType.loadingCell)
        }
        return dataSource
    }
    
    private func configWaitingMsg() {
        //usado para disparar o showWaitingMsg pq a api do heroku na primeira chamada demora muito para responder
        //pq a maquina pode estar off
        loadingTimer = Timer.scheduledTimer(timeInterval: 6, target: self, selector: (#selector(self.showWaitingMsg)), userInfo: nil, repeats: true)
    }
    
    @objc private func showWaitingMsg() {
        let options = ["Estamos carregando ainda...", "Lembra que essa api ta no heroku!", "Só mais um pouco...", "Paciência é uma virtude!", "O tempo é um processo de espera!"]
        let bgCollorYellow = UIColor.init(red: 213/255, green: 230/255, blue: 23/255, alpha: 1)
        _view.displayMessage(bgColor: bgCollorYellow, msg: options.randomElement()!)
    }

}

// MARK: - Extensions -

extension MatchDetailsPresenter: MatchDetailsPresenterInterface {
    func viewDidLoad() {
        _view.displayMatchDetailsTitle(screenTitle: matchDetailsTitle())
        fetchBids()

    }
    
    func viewWillDisappear(animated: Bool) {
        loadingTimer?.invalidate()
    }
    
    func fetchBids() {
        matchDetailsTableViewDataSource = initMatchDataSource(withLoading: true)
        if let matchResumeUrl = _match.transmission?.url {
            configWaitingMsg()
            _interactor.fetchBids(matchResumeUrl, completionHandler: { [weak self] result in
                guard let weakSelf = self else { return }
                weakSelf.loadingTimer?.invalidate()
                var dataSource = weakSelf.initMatchDataSource(withLoading: false)
                if let bids = result as? [Bid] {
                    //escondo msg de loading
                    weakSelf._view.hideMessage()
                    for bid in bids {
                        dataSource.append(MatchDetailsCellType.bidCell(cellViewModel: bid))
                    }

                } else if let error = result as? Error {
                    let bgColorRed = UIColor.init(red: 250/255, green: 80/255, blue: 80/255, alpha: 1)
                    weakSelf._view.displayMessage(bgColor: bgColorRed, msg: error.localizedDescription)
                }
                weakSelf.matchDetailsTableViewDataSource = dataSource
            })

        }
        
    }
    
    func numberOfItems() -> Int {
        return matchDetailsTableViewDataSource.count
    }
    
    func item(at indexPath: IndexPath) -> MatchDetailsCellType {
        return matchDetailsTableViewDataSource[indexPath.row]
    }
}
